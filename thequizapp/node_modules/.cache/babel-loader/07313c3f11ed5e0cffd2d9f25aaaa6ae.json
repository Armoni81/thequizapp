{"ast":null,"code":"var _jsxFileName = \"/Users/corcoding/Desktop/Capstone/react/thequizapp/src/Components/Questions.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport logo from \"../images/925808_wifi_icon.png\";\nimport \"../CSS/questions.css\";\nimport { Button } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Questions() {\n  _s();\n\n  const questions1 = [{\n    questionsText: \"What is your name?\",\n    anwserOptions: [{\n      anwserText: \"Armoni\",\n      isCorrect: true\n    }, {\n      anwserText: \"Ayden\",\n      isCorrect: false\n    }, {\n      anwserText: \"Allen\",\n      isCorrect: false\n    }, {\n      anwserText: \"Cassie\",\n      isCorrect: false\n    }]\n  }, {\n    questionsText: \"What is the Capital of North Carolina?\",\n    anwserOptions: [{\n      anwserText: \"Greensboro\",\n      isCorrect: true\n    }, {\n      anwserText: \"Raliegh\",\n      isCorrect: false\n    }, {\n      anwserText: \"Charlotte\",\n      isCorrect: false\n    }, {\n      anwserText: \"Fort Mill\",\n      isCorrect: false\n    }]\n  }, {\n    questionsText: \"What does CSS stand for?\",\n    anwserOptions: [{\n      anwserText: \"Casscading Style Sheet\",\n      isCorrect: true\n    }, {\n      anwserText: \"Casscasing Sheet Style\",\n      isCorrect: false\n    }, {\n      anwserText: \"Computer Sheet Style\",\n      isCorrect: false\n    }, {\n      anwserText: \"Customizeable Style Sheet\",\n      isCorrect: false\n    }]\n  }];\n  const max = 0;\n  const min = 0;\n  var z = Math.floor(Math.random() * 13) + 1;\n  const y = Math.floor(Math.random() * max) + 1;\n  const anwseredQuestions = [];\n  /* variables ^ */\n\n  /* function v */\n\n  /*const pushEmptyArray =  function getQuestions(currentQuestion){\n        if (z === questions1.length){\n            anwseredQuestions.push(currentQuestion)   \n        }\n    }\n   const resetMe = function resetQuiz(){\n        if (anwseredQuestions === questions1.length)\n        <button>RESTART</button> \n    } */\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(true);\n  const [score, setScore] = useState(0);\n  const [isShowing, setIsShowing] = useState(true);\n  const nextQuestion = currentQuestion + 1;\n\n  const handleAnswerButtonClick = isCorrect => {\n    if (isCorrect) {\n      setScore(score + 1);\n    } else {\n      alert(\"This is incorrect ðŸ˜•\");\n    }\n\n    if (nextQuestion < questions1.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n\n    if (nextQuestion === questions1.length) {\n      setCurrentQuestion(0);\n      setShowScore(false);\n      setScore(0);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"body\", {\n    children: showScore( /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"container-quest\",\n      children: [\"You scored \", score, \" out of \", questions1.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }, this))( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-cont\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: isShowing ? \"container-quest\" : \"hide\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"question\",\n          children: questions1[currentQuestion].questionsText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"anwser-buttons\",\n          className: \"btn-grid\",\n          children: questions1[currentQuestion].anwserOptions.map(anwserOptions => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleAnswerButtonClick(anwserOptions.isCorrect),\n            className: \"btn\",\n            children: anwserOptions.anwserText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls-quest\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Score\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: score\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            id: isShowing ? \"bigger\" : \"bigger2\",\n            onClick: () => setIsShowing(!isShowing),\n            children: \"Adjust Size\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Questions, \"KIc+ZeDYBYnNBV1OFcaN1u0CpUM=\");\n\n_c = Questions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"sources":["/Users/corcoding/Desktop/Capstone/react/thequizapp/src/Components/Questions.js"],"names":["React","logo","Button","useState","Questions","questions1","questionsText","anwserOptions","anwserText","isCorrect","max","min","z","Math","floor","random","y","anwseredQuestions","currentQuestion","setCurrentQuestion","showScore","setShowScore","score","setScore","isShowing","setIsShowing","nextQuestion","handleAnswerButtonClick","alert","length","map"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport logo from \"../images/925808_wifi_icon.png\"\nimport \"../CSS/questions.css\"\nimport { Button } from \"react-bootstrap\"\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport {useState} from \"react\"\n\nexport default function Questions (){\n        const questions1 = [\n            {\n                questionsText: \"What is your name?\",\n                anwserOptions:[\n                    {anwserText: \"Armoni\", isCorrect:true},\n                    {anwserText: \"Ayden\", isCorrect:false},\n                    {anwserText: \"Allen\", isCorrect:false},\n                    {anwserText: \"Cassie\", isCorrect:false},\n                ],\n            },\n            \n        {\n            questionsText: \"What is the Capital of North Carolina?\",\n                anwserOptions:[\n                    {anwserText: \"Greensboro\", isCorrect:true},\n                    {anwserText: \"Raliegh\", isCorrect:false},\n                    {anwserText: \"Charlotte\", isCorrect:false},\n                    {anwserText: \"Fort Mill\", isCorrect:false},\n                ],\n            },\n            {\n                questionsText: \"What does CSS stand for?\",\n                anwserOptions:[\n                    {anwserText: \"Casscading Style Sheet\", isCorrect:true},\n                    {anwserText: \"Casscasing Sheet Style\", isCorrect:false},\n                    {anwserText: \"Computer Sheet Style\", isCorrect:false},\n                    {anwserText: \"Customizeable Style Sheet\", isCorrect:false},\n                ],\n            },\n            \n        ]\n        const max =0\n        const min = 0\n        var z = Math.floor(Math.random() * 13) + 1;\n        const y = Math.floor(Math.random() * max) + 1; \n        const anwseredQuestions = []\n        \n        /* variables ^ */\n        /* function v */\n      /*const pushEmptyArray =  function getQuestions(currentQuestion){\n            if (z === questions1.length){\n                anwseredQuestions.push(currentQuestion)   \n            }\n        }\n       const resetMe = function resetQuiz(){\n            if (anwseredQuestions === questions1.length)\n            <button>RESTART</button> \n        } */\n\n    const [currentQuestion, setCurrentQuestion] = useState(0);\n\tconst [showScore, setShowScore] = useState(true);\n\tconst [score, setScore] = useState(0);\n    const [isShowing, setIsShowing] = useState(true)\n    const nextQuestion = currentQuestion + 1;   \n\n\tconst handleAnswerButtonClick = (isCorrect) => {\n\t\tif (isCorrect) {\n\t\t\tsetScore(score + 1);\n\t\t}\n        else {\n            alert(\"This is incorrect ðŸ˜•\")\n        }\n\n\t\t\n\t\tif (nextQuestion < questions1.length) {\n\t\t\tsetCurrentQuestion(nextQuestion);\n\t\t} else {\n\t\t\tsetShowScore(true);\n\t\t}\n\n        if(nextQuestion === questions1.length ){\n            setCurrentQuestion (0)\n            setShowScore(false)\n            setScore(0)\n           \n        }\n       \n\t};\n\n   \n\n    \nreturn(\n    <body>\n        {showScore (\n\t\t\t\t<div id = \"container-quest\">\n\t\t\t\t\tYou scored {score} out of {questions1.length}\n\t\t\t\t</div>\n\t\t\t)  (\n                \n        <div className = \"quiz-cont\">\n            <div id =  {isShowing ?\"container-quest\": \"hide\" }>\n                <div id = \"question\">{questions1[currentQuestion].questionsText}</div>\n                <div id = \"anwser-buttons\" className= \"btn-grid\"> \n                    {questions1[currentQuestion].anwserOptions.map((anwserOptions) =>(\n                    <button  onClick = {()=>handleAnswerButtonClick(anwserOptions.isCorrect)}className= \"btn\">{anwserOptions.anwserText}</button>\n                ))}\n                </div>\n                <div className = \"controls-quest\">\n                   \n                </div>\n                <div>\n                    <h3>Score</h3>\n                    <p>{score}</p>\n                </div>\n                <div>\n                \n                    <button  id = {isShowing ?\"bigger\":\"bigger2\"}onClick = {()=> setIsShowing(!isShowing)}>Adjust Size</button>\n                </div>\n        \n                \n            </div> \n            \n        </div>\n          \n            )}\n    </body>\n    \n)\n\n}\n"]},"metadata":{},"sourceType":"module"}